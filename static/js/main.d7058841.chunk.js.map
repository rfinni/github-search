{"version":3,"sources":["components/Title.jsx","components/SearchField.jsx","components/Suggestions.jsx","components/UserImg.jsx","components/UserData.jsx","components/UserInfo.jsx","components/SearchContainer.jsx","config/config.js","services/services.js","components/App.jsx","serviceWorker.js","index.js"],"names":["Title","react_default","a","createElement","className","width","height","viewBox","fill","d","SearchField","_ref","isLoading","value","handleClear","handleChange","type","id","name","placeholder","onChange","e","length","onClick","Suggestions","items","handleClick","map","item","i","key","login","src","avatar_url","alt","renderItems","UserImg","user","avatar","UserData","location","Date","joined","getFullYear","UserInfo","rel","href","url","target","components_UserImg","components_UserData","SearchContainer","showSuggestions","suggestions","userData","inputValue","handleClearInput","Fragment","components_SearchField","components_Suggestions","isEmpty","components_UserInfo","URLS","searchForUserSuggestions","Object","asyncToGenerator","regenerator_default","mark","_callee","val","request","wrap","_context","prev","next","fetch","concat","sent","abrupt","json","stop","_x","apply","this","arguments","requestUser","_ref2","_callee2","_context2","_x2","App","_this","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","state","displayError","setState","debouncedSearch","preventDefault","getUserData","clearInput","getSuggestions","response","toggleLoadingState","setTimeout","t0","updateSearchState","data","html_url","created_at","prevState","debounce","_this$state","components_Title","components_SearchContainer","Component","Boolean","window","hostname","match","ReactDOM","render","components_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d7058841.chunk.js","sourcesContent":["import React from 'react';\n\nconst Title = () => (\n  <div className=\"app-title\">\n    <svg width=\"30\" height=\"30\" viewBox=\"0 0 512 512\" className=\"icon\">\n      <path fill=\"#333333\" d=\"M256.004 6.321c-141.369 0-256.004 114.609-256.004 255.999 0 113.107 73.352 209.066 175.068 242.918 12.793 2.369 17.496-5.555 17.496-12.316 0-6.102-0.24-26.271-0.348-47.662-71.224 15.488-86.252-30.205-86.252-30.205-11.641-29.588-28.424-37.458-28.424-37.458-23.226-15.889 1.755-15.562 1.755-15.562 25.7 1.805 39.238 26.383 39.238 26.383 22.836 39.135 59.888 27.82 74.502 21.279 2.294-16.543 8.926-27.84 16.253-34.232-56.865-6.471-116.638-28.425-116.638-126.516 0-27.949 10.002-50.787 26.38-68.714-2.658-6.45-11.427-32.486 2.476-67.75 0 0 21.503-6.876 70.42 26.245 20.418-5.674 42.318-8.518 64.077-8.617 21.751 0.099 43.668 2.943 64.128 8.617 48.867-33.122 70.328-26.245 70.328-26.245 13.936 35.264 5.175 61.3 2.518 67.75 16.41 17.928 26.347 40.766 26.347 68.714 0 98.327-59.889 119.975-116.895 126.312 9.182 7.945 17.362 23.523 17.362 47.406 0 34.254-0.298 61.822-0.298 70.254 0 6.814 4.611 14.797 17.586 12.283 101.661-33.888 174.921-129.813 174.921-242.884 0-141.39-114.617-255.999-255.996-255.999z\" />\n    </svg>\n    <h1>GitHub User Search</h1>\n  </div>\n);\n\nexport default Title;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst SearchField = ({\n  isLoading,\n  value,\n  handleClear,\n  handleChange,\n}) => (\n  <div className=\"search-field\">\n    {isLoading && <div className=\"loading-state\" />}\n    <input\n      type=\"text\"\n      className=\"search\"\n      id=\"search\"\n      name=\"search\"\n      placeholder=\"Search for a GitHub username\"\n      value={value}\n      onChange={e => handleChange(e)}\n    />\n    {value.length >= 1 && (\n      <button\n        type=\"button\"\n        onClick={handleClear}\n        className=\"clear\"\n      >\n        <svg width=\"20px\" height=\"20px\" viewBox=\"0 0 768 768\">\n          <path d=\"M608 128q13.75 0 22.875 9.125t9.125 22.875q0 13.5-9.25 22.75l-201.5 201.25 201.5 201.25q9.25 9.25 9.25 22.75 0 13.75-9.125 22.875t-22.875 9.125q-13.5 0-22.75-9.25l-201.25-201.5-201.25 201.5q-9.25 9.25-22.75 9.25-13.75 0-22.875-9.125t-9.125-22.875q0-13.5 9.25-22.75l201.5-201.25-201.5-201.25q-9.25-9.25-9.25-22.75 0-13.75 9.125-22.875t22.875-9.125q13.5 0 22.75 9.25l201.25 201.5 201.25-201.5q9.25-9.25 22.75-9.25z\" />\n        </svg>\n        <span>Clear</span>\n      </button>\n    )}\n  </div>\n);\n\nSearchField.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  handleClear: PropTypes.func.isRequired,\n  value: PropTypes.string.isRequired,\n};\n\nexport default SearchField;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst renderItems = (items, handleClick) => items.map((item, i) => (\n  <li key={i}>\n    <button onClick={(e) => handleClick(e, item.login)}>\n      <img className=\"avatar\" src={item.avatar_url} alt={item.login} />\n      {item.login}\n    </button>\n  </li>\n));\n\nconst Suggestions = ({\n  items,\n  handleClick,\n}) => (\n  <nav className=\"suggestions\">\n    <ul>\n      {items.length ? (\n        renderItems(items, handleClick)\n      ) : (\n        <li className=\"no-items\">Nothing was found.</li>\n      )}\n    </ul>\n  </nav>\n);\n\nSuggestions.propTypes = {\n  items: PropTypes.array.isRequired,\n  handleClick: PropTypes.func.isRequired,\n};\n\nexport default Suggestions;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst UserImg = ({ user }) => (\n  <div className=\"image-wrapper\">\n    <img className=\"user-image\" src={user.avatar} alt={user.name} />\n  </div>\n);\n\nUserImg.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default UserImg;\n","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst UserData = ({ user }) => (\n  <div className=\"user-data\">\n    <span className=\"name\">{user.name} ({user.login})</span>\n    <span>{user.location}</span>\n    <span>Joined GitHub in {new Date(user.joined).getFullYear()}</span>\n  </div>\n);\n\nUserData.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default UserData;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport UserImg from './UserImg';\nimport UserData from './UserData';\n\nconst UserInfo = ({ user }) => (\n  <div className=\"user-info\">\n    <a rel=\"noopener noreferrer\" href={user.url} target=\"_blank\">\n      <UserImg user={user} />\n      <UserData user={user} />\n    </a>\n  </div>\n);\n\nUserInfo.propTypes = {\n  user: PropTypes.object.isRequired,\n};\n\nexport default UserInfo;\n","import React from 'react';\nimport PropTypes from 'prop-types';\nimport isEmpty from 'lodash/isEmpty';\nimport SearchField from './SearchField';\nimport Suggestions from './Suggestions';\nimport UserInfo from './UserInfo';\n\nexport const SearchContainer = ({\n  isLoading,\n  showSuggestions,\n  suggestions,\n  userData,\n  inputValue,\n  handleClearInput,\n  handleChange,\n  onClick,\n}) => (\n  <React.Fragment>\n    <section className=\"search-wrapper\">\n      <SearchField\n        isLoading={isLoading}\n        value={inputValue}\n        handleChange={handleChange}\n        handleClear={handleClearInput}\n      />\n\n      {showSuggestions && (\n        <Suggestions\n          items={suggestions}\n          handleClick={onClick}\n        />\n      )}\n    </section>\n    { !isEmpty(userData) && <UserInfo user={userData} /> }\n  </React.Fragment>\n);\n\nSearchContainer.propTypes = {\n  isLoading: PropTypes.bool.isRequired,\n  showSuggestions: PropTypes.bool.isRequired,\n  suggestions: PropTypes.array.isRequired,\n  userData: PropTypes.object.isRequired,\n  inputValue: PropTypes.string.isRequired,\n  handleClearInput: PropTypes.func.isRequired,\n  handleChange: PropTypes.func.isRequired,\n  onClick: PropTypes.func.isRequired,\n};\n\nexport default SearchContainer;\n","\nexport const URLS = {\n  USERS: '//api.github.com/users/',\n  SEARCH: '//api.github.com/search/users?q=',\n}","import { URLS } from '../config/config';\n\n/**\n * Searchs github for user suggestions based on input value\n * @param {string} val\n * @returns {Promise}\n */\nexport const searchForUserSuggestions = async (val) => {\n  const request = await fetch(`${URLS.SEARCH}${val}`);\n  return request.json();\n}\n\n/**\n * Gets a specific user's data\n * @param {string} user\n * @returns {Promise}\n */\nexport const requestUser = async (user) => {\n  const request = await fetch(`${URLS.USERS}${user}`);\n  return request.json();\n}\n","import React, { Component } from 'react';\nimport debounce from 'lodash/debounce';\nimport Title from './Title';\nimport SearchContainer from './SearchContainer';\nimport {\n  searchForUserSuggestions,\n  requestUser,\n} from '../services/services';\nimport '../assets/styles/App.css'\n\nclass App extends Component {\n  constructor() {\n    super();\n\n    this.debouncedSearch = debounce((value) => {\n      this.getSuggestions(value);\n    }, 600);\n  }\n\n  state = {\n    isLoading: false,\n    suggestions: [],\n    showSuggestions: false,\n    userData: {},\n    inputValue: '',\n    displayError: false,\n  }\n\n  handleChange = (e) => {\n    let value = e.target.value;\n\n    this.setState({\n      inputValue: value\n    });\n\n    if(value.length >= 3) {\n      this.debouncedSearch(value);\n    }\n  }\n\n  handleClick = (e, user) => {\n    e.preventDefault();\n    this.getUserData(user);\n  }\n\n  clearInput = () => {\n    this.setState({\n      isLoading: false,\n      suggestions: [],\n      showSuggestions: false,\n      userData: {},\n      inputValue: '',\n      displayError: false,\n    });\n  }\n\n  // Searches GitHub API for user suggestions based on an input value\n  getSuggestions = async (val) => {\n    try {\n      this.toggleLoadingState();\n      const response = await searchForUserSuggestions(val);\n\n    // Set some artificial latency\n    setTimeout(() => {\n      this.setState({\n        suggestions: response.items,\n        showSuggestions: true,\n      });\n      this.toggleLoadingState();\n    }, 1000);\n    } catch(e) {\n      this.displayError();\n    }\n  }\n\n  // Get more info about a user\n  getUserData = async (user) => {\n    try {\n      this.toggleLoadingState();\n      const response = await requestUser(user);\n\n      this.updateSearchState(response);\n      this.toggleLoadingState();\n    } catch(e) {\n      this.displayError();\n    }\n  }\n\n  updateSearchState = (data) => {\n    this.setState({\n      inputValue: data.login,\n      suggestions: [],\n      showSuggestions: false,\n      userData: {\n        login: data.login,\n        url: data.html_url,\n        avatar: data.avatar_url,\n        name: data.name,\n        location: data.location,\n        joined: data.created_at\n      },\n    });\n  }\n\n  toggleLoadingState = () => {\n    this.setState((prevState) => ({\n      isLoading: !prevState.isLoading,\n    }));\n  }\n\n  displayError = () => {\n    this.setState({\n      isLoading: false,\n      showSuggestions: false,\n      displayError: 'An error occurred. Please try again.',\n    });\n  }\n\n  render() {\n    const {\n      isLoading,\n      suggestions,\n      showSuggestions,\n      userData,\n      inputValue,\n      displayError,\n    } = this.state;\n\n    return (\n      <main className=\"outer-container\">\n        <div className=\"inner\">\n          <Title />\n          <SearchContainer\n            isLoading={isLoading}\n            suggestions={suggestions}\n            showSuggestions={showSuggestions}\n            userData={userData}\n            inputValue={inputValue}\n            handleChange={this.handleChange}\n            handleClearInput={this.clearInput}\n            onClick={this.handleClick}\n          />\n          {displayError.length > 0 && <p className=\"error\">{displayError}</p>}\n        </div>\n      </main>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './components/App';\n\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}